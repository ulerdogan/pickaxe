// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: indexer.sql

package db

import (
	"context"
	"database/sql"
)

const getHashedIndexerPwd = `-- name: GetHashedIndexerPwd :one
SELECT hashed_password FROM indexer
WHERE id = 0 LIMIT 1
`

func (q *Queries) GetHashedIndexerPwd(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getHashedIndexerPwd)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const getIndexerStatus = `-- name: GetIndexerStatus :one
SELECT id, hashed_password, last_queried_block, last_queried_hash, last_updated FROM indexer
WHERE id = 0 LIMIT 1
`

func (q *Queries) GetIndexerStatus(ctx context.Context) (Indexer, error) {
	row := q.db.QueryRowContext(ctx, getIndexerStatus)
	var i Indexer
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.LastQueriedBlock,
		&i.LastQueriedHash,
		&i.LastUpdated,
	)
	return i, err
}

const initIndexer = `-- name: InitIndexer :one
INSERT INTO indexer (
  id,
  hashed_password,
  last_queried_block,
  last_queried_hash,
  last_updated
) VALUES (
  0, $1, $2, $3, NOW()
) RETURNING id, hashed_password, last_queried_block, last_queried_hash, last_updated
`

type InitIndexerParams struct {
	HashedPassword   string         `json:"hashed_password"`
	LastQueriedBlock sql.NullInt64  `json:"last_queried_block"`
	LastQueriedHash  sql.NullString `json:"last_queried_hash"`
}

func (q *Queries) InitIndexer(ctx context.Context, arg InitIndexerParams) (Indexer, error) {
	row := q.db.QueryRowContext(ctx, initIndexer, arg.HashedPassword, arg.LastQueriedBlock, arg.LastQueriedHash)
	var i Indexer
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.LastQueriedBlock,
		&i.LastQueriedHash,
		&i.LastUpdated,
	)
	return i, err
}

const updateIndexerStatus = `-- name: UpdateIndexerStatus :one
UPDATE indexer
SET last_queried_block = $1, last_queried_hash = $2, last_updated = NOW()
WHERE id = 0
RETURNING id, hashed_password, last_queried_block, last_queried_hash, last_updated
`

type UpdateIndexerStatusParams struct {
	LastQueriedBlock sql.NullInt64  `json:"last_queried_block"`
	LastQueriedHash  sql.NullString `json:"last_queried_hash"`
}

func (q *Queries) UpdateIndexerStatus(ctx context.Context, arg UpdateIndexerStatusParams) (Indexer, error) {
	row := q.db.QueryRowContext(ctx, updateIndexerStatus, arg.LastQueriedBlock, arg.LastQueriedHash)
	var i Indexer
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.LastQueriedBlock,
		&i.LastQueriedHash,
		&i.LastUpdated,
	)
	return i, err
}
